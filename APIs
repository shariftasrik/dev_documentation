-----------------------------------------------------------------------------------

APIs - Application Programming Interface

It's essentially a set of rules and protocols that define 
how different software can interact with each other

-----------------------------------------------------------------------------------

API Endpoints :

	BaseURL/Endpoint

	Example :
	
	https://bored-api.appbrewery.com/some-endpoint

-----------------------------------------------------------------------------------

Query Parameters :

	BaseURL/endpoint?query=value   ( ?  is must )

	Example :
	
	bored-api.appbrewery.com/endpoint?query=value

-----------------------------------------------------------------------------------

Multiple Query Parameters :

	BaseURL/endpoint?query=value&query2=value   ( ?,&  is must )

	Example :
	
	bored-api.appbrewery.com/endpoint?query=value&query2=value


-----------------------------------------------------------------------------------

Path Parameters :

	BaseURL/endpoint/{path-parameter}

	Example :

	bored-api.appbrewery.com/endpoint/{path-parameter}
		path-parameter : id or userName etc..

-----------------------------------------------------------------------------------

APIs Authentication :

	0. No Authentication
	2. Basic Authentication
	3. API key Authorisation
	4. Token Based Authentication

-----------------------------------------------------------------------------------

No Authentication API :

** public APIs have no authentication
** anyone can use it
** super easy to started
** all of the endpoints don't require any kind of authentication
** but the API requests are rate limited (only safety things)

-----------------------------------------------------------------------------------

Basic Authentication API :

** provide a username and password when you make an API request
   that means your are authenticating yourself to the API provider
** Usually, the way that Basic Authentication is done is by passing over 
   a Base64 encoded string in the header of the request.
** Base64 encoding => it's basically taking text which is ASCII
** {
	username:password
	Authorisation : username:password_Basic64 format
   }

-----------------------------------------------------------------------------------


Authorisation vs Authentication :

** Authentication => If you have an user, they can authenticate themselves 
		     	with your service (registering, logging in)
		     It allows to identify as an user to the API provider

   Authorisation  => It's simply a client who is allowed to use your service
		     It allows to use an API

-----------------------------------------------------------------------------------

API Key Authorisation :

	Step 1 : Generate API key
		** GET : URL_to_generate_key
		** Send
		** get the "apiKey" at the JSON (K of apiKey is capital)

	Step 2 : USE Filter URL
		** GET   : URL_to_use_filter
		** Param : have to write the value 		
		** Auth  : Set it for "API Key"
			   Write "apiKey" at beside key box
			   Paste the apiKey value beside the value box
			   Set the "Add to" box with Header or Querty Params
		** URL   : https://xyz.com/filter?score=x&apiKey=9c751b2e8837d5bf 
			   (filter values will be adjust with url autometically)
		** Send	 : the result will be shown then


-----------------------------------------------------------------------------------


Token Based Authentication :

 	Step 1 : get-auth-token by POST request
		** POST  : URL_to_get_auth_token
		** Body  : x-www-form-urlencoded
			  username : aaaaaa
			  password : xyzxyz
		** Send  :
		** get the "token" at the JSON 
			(first time only token, after that every time will 
			generate an error that tells "already issued token")
		** Store : copy the token

	Step 2 : USE URL
		** GET   : URL_to_use_filter and set the id as your need	
		** Auth  : Set it for "Bearer Token"
		** Token : Paste the token
		** Send	 : the result will be shown then


-----------------------------------------------------------------------------------


